{"version":3,"sources":["main.js","scripts.js"],"names":["document","addEventListener","querySelectorAll","forEach","button","burgerBtn","querySelector","sidebar","classList","toggle","toggleButton","getElementById","closeButton","closeModal","modal","remove","body","setTimeout","style","display","activateTab","container","tabButtons","tabPanes","targetTabId","getAttribute","targetPane","containerId","btn","pane","add","externalButton","overflow","dropdown","menu","event","preventDefault","isOpen","contains","m","t","target","closest","targetId","this","targetElement","headerElement","height","offsetHeight","scrollHeight","trigger","tooltipContainer","parentElement","tooltipContent","visibility","opacity","matches","e","stopPropagation","element","modalId","openModal","window","tabsId","targetTabButton","barsData","id","percentageId","amount","totalAmount","reduce","total","item","percentages","map","percentage","totalPercentage","adjustedPercentages","adjustedPercentage","Math","floor","animateBars","data","dataItem","index","fillElement","percentageElement","textContent","round","width","console","log"],"mappings":"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","file":"main.min.js","sourcesContent":["// Imports\r\n//=require jquery/dist/jquery.min.js\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    document.querySelectorAll('.itg-toggle-btn-sidebar').forEach(button => {\r\n        button.addEventListener('click', () => {\r\n            // Encuentra el primer elemento con la clase 'sidebar'\r\n            const burgerBtn = document.querySelector('.itg-burger-btn');\r\n            const sidebar = document.querySelector('.itg-layout-sticky-container .layout-sidebar');\r\n            burgerBtn.classList.toggle('active');\r\n            sidebar.classList.toggle('open');\r\n        });\r\n    });\r\n    \r\n    // SIDEBAR MOBILE\r\n    const toggleButton = document.getElementById('toggle-button-mobile');\r\n    const closeButton = document.getElementById('close-button-mobile');\r\n    const sidebar = document.getElementById('sidebar-mobile');\r\n\r\n    toggleButton.addEventListener('click', () => {\r\n        sidebar.classList.toggle('open');\r\n        document.body.style.overflow = 'hidden'; // Oculta el overflow del body\r\n    });\r\n\r\n    closeButton.addEventListener('click', () => {\r\n        sidebar.classList.remove('open');\r\n        document.body.style.overflow = 'auto'; // Restablece el overflow del body\r\n    });\r\n\r\n    // SELECT DROPDOWN\r\n    const dropdowns = document.querySelectorAll('.itg-dropdown');\r\n\r\n    dropdowns.forEach(dropdown => {\r\n        const toggle = dropdown.querySelector('.itg-dropdown-toggle');\r\n        const menu = dropdown.querySelector('.itg-dropdown-menu');\r\n\r\n        toggle.addEventListener('click', function (event) {\r\n            event.preventDefault(); // Evitar el comportamiento predeterminado del clic\r\n            const isOpen = menu.classList.contains('show');\r\n\r\n            // Cerrar todos los dropdowns abiertos\r\n            document.querySelectorAll('.itg-dropdown-menu').forEach(m => m.classList.remove('show'));\r\n            document.querySelectorAll('.itg-dropdown-toggle').forEach(t => t.classList.remove('show'));\r\n\r\n            if (!isOpen) {\r\n                menu.classList.add('show');\r\n                toggle.classList.add('show');\r\n            }\r\n        });\r\n    });\r\n\r\n    document.addEventListener('click', function (event) {\r\n        if (!event.target.closest('.itg-dropdown')) {\r\n            document.querySelectorAll('.itg-dropdown-menu').forEach(menu => menu.classList.remove('show'));\r\n            document.querySelectorAll('.itg-dropdown-toggle').forEach(toggle => toggle.classList.remove('show'));\r\n        }\r\n    });\r\n\r\n    // ACCORDION\r\n    const buttons = document.querySelectorAll('.itg-accordion .accordion-toggle');\r\n\r\n    buttons.forEach(button => {\r\n        button.addEventListener('click', function () {\r\n            const targetId = this.getAttribute('data-target');\r\n            const targetElement = document.querySelector(targetId);\r\n            const headerElement = this.closest('.accordion-header'); // Encuentra el encabezado mÃ¡s cercano\r\n\r\n            if (targetElement.classList.contains('show')) {\r\n                // Close the target element\r\n                targetElement.classList.remove('show');\r\n                targetElement.style.height = '0'; // Collapse height to 0\r\n                setTimeout(() => {\r\n                    targetElement.classList.remove('collapse');\r\n                    targetElement.style.display = 'none'; // Hide after transition\r\n                }, 300); // Match this with the transition duration\r\n\r\n                // Update button state\r\n                this.classList.add('collapsed');\r\n\r\n                // Add 'close' class to the accordion header\r\n                if (headerElement) {\r\n                    headerElement.classList.add('close');\r\n                }\r\n            } else {\r\n                // Open the target element\r\n                targetElement.classList.add('collapse');\r\n                targetElement.style.display = 'block';\r\n                // Trigger reflow to apply transition\r\n                targetElement.offsetHeight; // Trigger reflow\r\n                targetElement.classList.add('show');\r\n                targetElement.style.height = targetElement.scrollHeight + 'px'; // Set height to the content height\r\n\r\n                // Update button state\r\n                this.classList.remove('collapsed');\r\n\r\n                // Remove 'close' class from the accordion header\r\n                if (headerElement) {\r\n                    headerElement.classList.remove('close');\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // TOOLTIP\r\n    const tooltipTriggers = document.querySelectorAll('.itg-tooltips .tooltip-trigger');\r\n\r\n    tooltipTriggers.forEach(trigger => {\r\n        const tooltipContainer = trigger.parentElement;\r\n        const tooltipContent = tooltipContainer.querySelector('.tooltip-content');\r\n\r\n        // Mostrar el tooltip al pasar el mouse\r\n        trigger.addEventListener('mouseover', () => {\r\n            tooltipContent.style.visibility = 'visible';\r\n            tooltipContent.style.opacity = '1';\r\n        });\r\n\r\n        // Ocultar el tooltip al quitar el mouse, si el mouse no estÃ¡ sobre el tooltip\r\n        trigger.addEventListener('mouseout', () => {\r\n            if (!tooltipContent.matches(':hover')) {\r\n                tooltipContent.style.visibility = 'hidden';\r\n                tooltipContent.style.opacity = '0';\r\n            }\r\n        });\r\n\r\n        // Mostrar el tooltip cuando se hace clic en el trigger\r\n        trigger.addEventListener('click', (e) => {\r\n            e.stopPropagation(); // Previene que el clic cierre el tooltip inmediatamente\r\n            tooltipContent.style.visibility = 'visible';\r\n            tooltipContent.style.opacity = '1';\r\n        });\r\n\r\n        // Ocultar el tooltip cuando se hace clic fuera\r\n        const closeTooltip = (e) => {\r\n            if (!tooltipContainer.contains(e.target)) {\r\n                tooltipContent.style.visibility = 'hidden';\r\n                tooltipContent.style.opacity = '0';\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', closeTooltip);\r\n    });\r\n\r\n    // MODAL\r\n    // Function to open the modal\r\n    function openModal(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n        if (modal) {\r\n            // Temporarily set display to block to ensure the modal is rendered\r\n            modal.style.display = \"block\";\r\n            // Ensure a new frame is rendered before adding the transition class\r\n            setTimeout(() => {\r\n                modal.classList.add('show');\r\n            }, 10); // Brief delay to trigger transition\r\n\r\n            document.body.classList.add('modal-open');\r\n        }\r\n    }\r\n\r\n    // Function to close the modal\r\n    function closeModal(modal) {\r\n        modal.classList.remove('show');\r\n        document.body.classList.remove('modal-open');\r\n        // Delay hiding the modal to allow the transition to complete\r\n        setTimeout(() => {\r\n            modal.style.display = \"none\";\r\n        }, 300); // Match the transition duration in CSS\r\n    }\r\n\r\n    // Event listener for open modal buttons and links\r\n    document.querySelectorAll('.itg-open-modal-btn').forEach(element => {\r\n        element.addEventListener('click', function (event) {\r\n            event.preventDefault(); // Prevent default action for links\r\n            const modalId = this.getAttribute('data-modal');\r\n            openModal(modalId);\r\n        });\r\n    });\r\n\r\n    // Event listener for close buttons\r\n    document.querySelectorAll('.itg-close-modal, .itg-close-modal-btn').forEach(button => {\r\n        button.addEventListener('click', function () {\r\n            const modal = this.closest('.itg-modal');\r\n            closeModal(modal);\r\n        });\r\n    });\r\n\r\n    // Close modal when clicking outside of the modal content\r\n    window.addEventListener('click', function (event) {\r\n        if (event.target.classList.contains('itg-modal')) {\r\n            closeModal(event.target);\r\n        }\r\n    });\r\n\r\n    // TABS\r\n    // FunciÃ³n para activar una pestaÃ±a y sincronizar botones externos\r\n    function activateTab(container, button) {\r\n        const tabButtons = container.querySelectorAll('.itg-tabs .tab-button');\r\n        const tabPanes = container.querySelectorAll('.itg-tabs .tab-pane');\r\n        const targetTabId = button.getAttribute('data-tab');\r\n        const targetPane = container.querySelector(`#${targetTabId}`);\r\n\r\n        // Elimina la clase activa de todos los botones y panes\r\n        tabButtons.forEach(btn => btn.classList.remove('active'));\r\n        tabPanes.forEach(pane => pane.classList.remove('active'));\r\n\r\n        // AÃ±ade la clase activa al botÃ³n y al pane correspondiente\r\n        button.classList.add('active');\r\n        if (targetPane) {\r\n            targetPane.classList.add('active');\r\n        }\r\n\r\n        // Actualiza la clase activa en los botones externos relacionados\r\n        const containerId = container.getAttribute('id');\r\n        document.querySelectorAll(`.itg-tab-btn-external[data-tabs-id=\"${containerId}\"]`).forEach(externalButton => {\r\n            externalButton.classList.remove('active');\r\n            if (externalButton.getAttribute('data-target') === targetTabId) {\r\n                externalButton.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Manejo de clics en botones de tabs internos\r\n    document.querySelectorAll('.itg-tabs').forEach(container => {\r\n        const tabButtons = container.querySelectorAll('.itg-tabs .tab-button');\r\n\r\n        tabButtons.forEach(button => {\r\n            button.addEventListener('click', (event) => {\r\n                event.preventDefault(); // Evita el comportamiento predeterminado\r\n                activateTab(container, button);\r\n            });\r\n        });\r\n    });\r\n\r\n    // Manejo de clics en botones externos\r\n    document.querySelectorAll('.itg-tab-btn-external').forEach(button => {\r\n        button.addEventListener('click', (event) => {\r\n            event.preventDefault(); // Evita el comportamiento predeterminado\r\n            const targetTabId = button.getAttribute('data-target');\r\n            const tabsId = button.getAttribute('data-tabs-id');\r\n            const container = document.getElementById(tabsId);\r\n            const targetTabButton = container ? container.querySelector(`[data-tab=\"${targetTabId}\"]`) : null;\r\n\r\n            if (targetTabButton) {\r\n                activateTab(container, targetTabButton);\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\n\r\n// Datos de ejemplo\r\nconst barsData = [\r\n    { id: 'bar1', percentageId: 'percentage1', amount: 13615.22 },\r\n    { id: 'bar2', percentageId: 'percentage2', amount: 5879.32 },\r\n    { id: 'bar3', percentageId: 'percentage3', amount: 5879.32 },\r\n    { id: 'bar4', percentageId: 'percentage4', amount: 5879.32 },\r\n    { id: 'bar5', percentageId: 'percentage5', amount: 11448.56 }\r\n];\r\n\r\n// Calcular el monto total\r\nconst totalAmount = barsData.reduce((total, item) => total + item.amount, 0);\r\n\r\n// Calcular los porcentajes\r\nconst percentages = barsData.map(item => {\r\n    const percentage = (item.amount / totalAmount) * 100;\r\n    return {\r\n        id: item.id,\r\n        percentageId: item.percentageId,\r\n        percentage: percentage\r\n    };\r\n});\r\n\r\n// Redondear y ajustar porcentajes para que sumen exactamente 100%\r\nlet totalPercentage = percentages.reduce((total, item) => total + item.percentage, 0);\r\nconst adjustedPercentages = percentages.map(item => {\r\n    const adjustedPercentage = Math.floor(item.percentage);\r\n    return {\r\n        id: item.id,\r\n        percentageId: item.percentageId,\r\n        percentage: adjustedPercentage\r\n    };\r\n});\r\n\r\n// Recalcular el porcentaje total\r\ntotalPercentage = adjustedPercentages.reduce((total, item) => total + item.percentage, 0);\r\n\r\n// Ajustar el primer elemento para que el total sea exactamente 100%\r\nif (totalPercentage < 100) {\r\n    adjustedPercentages[0].percentage += (100 - totalPercentage);\r\n}\r\n\r\n// FunciÃ³n para animar las barras de progreso\r\nfunction animateBars(data) {\r\n    data.forEach((dataItem, index) => {\r\n        const barElement = document.getElementById(dataItem.id);\r\n        const fillElement = barElement.querySelector('.itg-fill');\r\n        const percentageElement = document.getElementById(dataItem.percentageId);\r\n\r\n        if (fillElement && percentageElement) {\r\n            // Actualizar el porcentaje y el contenido del span\r\n            percentageElement.textContent = `${Math.round(dataItem.percentage)}%`;\r\n\r\n            // Animar el ancho de la barra de llenado\r\n            // AÃ±adir un retraso para asegurar que la animaciÃ³n se aplique secuencialmente\r\n            setTimeout(() => {\r\n                fillElement.style.width = `${dataItem.percentage}%`;\r\n            }, index * 500); // Retraso incremental basado en el Ã­ndice\r\n        }\r\n    });\r\n}\r\n\r\n// Iniciar animaciÃ³n de barras despuÃ©s de que el DOM estÃ© completamente cargado\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    animateBars(adjustedPercentages);\r\n});","document.addEventListener('DOMContentLoaded', function() {\r\n    console.log('Hello, world!');\r\n});\r\n"]}